import * as i0 from '@angular/core';
import { Injectable, Directive, Input, HostListener, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@fortawesome/angular-fontawesome';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { FormsModule } from '@angular/forms';

class ShowHideService {
    constructor() {
        this.states = [];
    }
    getIO(id) {
        let io = this.states.find(o => o.id === id);
        if (!io) {
            io = this.init(id);
        }
        return io;
    }
    init(id) {
        const subject = new ReplaySubject(1);
        const io = {
            id,
            show: false,
            subject
        };
        this.states.push(io);
        return io;
    }
    saveAndProadcast(io, show) {
        io.show = show;
        io.subject.next(io.show);
    }
    getObservable(id) {
        return this.getIO(id).subject;
    }
    setShow(id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    }
    toggleShow(id) {
        const io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    }
}
ShowHideService.ɵfac = function ShowHideService_Factory(t) { return new (t || ShowHideService)(); };
ShowHideService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ShowHideService, factory: ShowHideService.ɵfac, providedIn: 'root' });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHideService, [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], function () { return []; }, null);
})();

class ShowHideTriggerDirective {
    constructor(service, errorHandler) {
        this.service = service;
        this.errorHandler = errorHandler;
    }
    onClick() {
        if (this.showHideTrigger) {
            this.service.toggleShow(this.showHideTrigger);
        }
        else {
            this.errorHandler.handleError(new Error(`Status can not be changed without [id].`));
        }
    }
}
ShowHideTriggerDirective.ɵfac = function ShowHideTriggerDirective_Factory(t) { return new (t || ShowHideTriggerDirective)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ErrorHandler)); };
ShowHideTriggerDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: ShowHideTriggerDirective, selectors: [["", "showHideTrigger", ""]], hostBindings: function ShowHideTriggerDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵlistener("click", function ShowHideTriggerDirective_click_HostBindingHandler() { return ctx.onClick(); });
        }
    }, inputs: { showHideTrigger: "showHideTrigger" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHideTriggerDirective, [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[showHideTrigger]'
                }]
        }], function () { return [{ type: ShowHideService }, { type: i0.ErrorHandler }]; }, { showHideTrigger: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] });
})();

/* eslint-disable @angular-eslint/directive-selector */
const defaultConfig = {
    show: 'visibility',
    hide: 'visibility_off',
    materialIcon: false,
    id: undefined,
};
class ShowHideStatusDirective {
    constructor(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
        this.config = defaultConfig;
    }
    set showHideStatus(config) {
        this.init(config);
    }
    init(config) {
        this.config = Object.assign(Object.assign({}, defaultConfig), config);
        if (this.config.id) {
            this.subscription = this.service
                .getObservable(this.config.id)
                .subscribe((show) => this.updateStatus(show));
        }
        else {
            this.errorHandler.handleError(new Error(`Status can not be set without [id].`));
        }
    }
    updateStatus(show) {
        var _a, _b;
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, (_a = (!show ? this.config.hide : this.config.show)) !== null && _a !== void 0 ? _a : '');
            this.renderer.addClass(this.el.nativeElement, (_b = (show ? this.config.hide : this.config.show)) !== null && _b !== void 0 ? _b : '');
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideStatusDirective.ɵfac = function ShowHideStatusDirective_Factory(t) { return new (t || ShowHideStatusDirective)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ErrorHandler)); };
ShowHideStatusDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: ShowHideStatusDirective, selectors: [["", "showHideStatus", ""]], inputs: { showHideStatus: "showHideStatus" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHideStatusDirective, [{
            type: Directive,
            args: [{
                    selector: '[showHideStatus]',
                }]
        }], function () { return [{ type: ShowHideService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ErrorHandler }]; }, { showHideStatus: [{
                type: Input
            }] });
})();

class ShowHideInputDirective {
    constructor(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
    }
    ngOnInit() {
        if (!this.id) {
            throw new Error(`No attribute [id] found.`);
        }
        else {
            this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
            this.service
                .getObservable(this.id)
                .subscribe((show) => this.renderer.setAttribute(this.el.nativeElement, 'type', show ? 'text' : 'password'));
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideInputDirective.ɵfac = function ShowHideInputDirective_Factory(t) { return new (t || ShowHideInputDirective)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
ShowHideInputDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: ShowHideInputDirective, selectors: [["input", "showHideInput", ""]], inputs: { id: "id" } });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHideInputDirective, [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'input[showHideInput]',
                }]
        }], function () { return [{ type: ShowHideService }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { id: [{
                type: Input
            }] });
})();

/* eslint-disable no-bitwise */
const _c0 = function (a0) { return { id: a0 }; };
const _c1 = ["*"];
var BtnStyle;
(function (BtnStyle) {
    BtnStyle["Primary"] = "primary";
    BtnStyle["Secondary"] = "secondary";
    BtnStyle["Success"] = "success";
    BtnStyle["Danger"] = "danger";
    BtnStyle["Warning"] = "warning";
    BtnStyle["Info"] = "info";
    BtnStyle["Dark"] = "dark";
    BtnStyle["Light"] = "light";
})(BtnStyle || (BtnStyle = {}));
// hail jed https://gist.github.com/jed/982883
const uuid = (a) => a
    ? (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
    : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * @example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
class ShowHidePasswordComponent {
    constructor(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = BtnStyle.Secondary;
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    ngOnInit() {
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error(`No input element found.`);
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput_' + uuid();
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service.getObservable(this.id).subscribe((show) => {
            this.isHidden = !show;
            this.renderer.setAttribute(this.input, 'type', show ? 'text' : 'password');
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHidePasswordComponent.ɵfac = function ShowHidePasswordComponent_Factory(t) { return new (t || ShowHidePasswordComponent)(i0.ɵɵdirectiveInject(ShowHideService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
ShowHidePasswordComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ShowHidePasswordComponent, selectors: [["show-hide-password"]], inputs: { btnStyle: "btnStyle", btnOutline: "btnOutline", size: "size" }, ngContentSelectors: _c1, decls: 3, vars: 7, consts: [["type", "button", 1, "btn", "ngx-show-hide-password", 3, "ngClass", "showHideTrigger"], ["size", "lg", 3, "fixedWidth", "icon", "showHideStatus"]], template: function ShowHidePasswordComponent_Template(rf, ctx) {
        if (rf & 1) {
            i0.ɵɵprojectionDef();
            i0.ɵɵprojection(0);
            i0.ɵɵelementStart(1, "button", 0);
            i0.ɵɵelement(2, "fa-icon", 1);
            i0.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("ngClass", ctx.btnOutline ? "btn-outline-" + ctx.btnStyle : "btn-" + ctx.btnStyle)("showHideTrigger", ctx.id);
            i0.ɵɵadvance(1);
            i0.ɵɵproperty("fixedWidth", true)("icon", ctx.isHidden ? ctx.faEye : ctx.faEyeSlash)("showHideStatus", i0.ɵɵpureFunction1(5, _c0, ctx.id));
        }
    }, dependencies: [i2.NgClass, i3.FaIconComponent, ShowHideTriggerDirective, ShowHideStatusDirective], encapsulation: 2, changeDetection: 0 });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHidePasswordComponent, [{
            type: Component,
            args: [{
                    selector: 'show-hide-password',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <ng-content></ng-content>
    <button
      class="btn ngx-show-hide-password"
      [ngClass]="btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle"
      type="button"
      [showHideTrigger]="id"
    >
      <fa-icon
        [fixedWidth]="true"
        size="lg"
        [icon]="isHidden ? faEye : faEyeSlash"
        [showHideStatus]="{ id: id }"
      ></fa-icon>
    </button>
  `,
                }]
        }], function () { return [{ type: ShowHideService }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, { btnStyle: [{
                type: Input
            }], btnOutline: [{
                type: Input
            }], size: [{
                type: Input
            }] });
})();

class ShowHidePasswordModule {
}
ShowHidePasswordModule.ɵfac = function ShowHidePasswordModule_Factory(t) { return new (t || ShowHidePasswordModule)(); };
ShowHidePasswordModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: ShowHidePasswordModule });
ShowHidePasswordModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule, FormsModule, FontAwesomeModule] });
(function () {
    (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHidePasswordModule, [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, FontAwesomeModule],
                    exports: [
                        ShowHidePasswordComponent,
                        ShowHideTriggerDirective,
                        ShowHideInputDirective,
                        ShowHideStatusDirective
                    ],
                    declarations: [
                        ShowHidePasswordComponent,
                        ShowHideTriggerDirective,
                        ShowHideInputDirective,
                        ShowHideStatusDirective
                    ]
                }]
        }], null, null);
})();
(function () {
    (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(ShowHidePasswordModule, { declarations: [ShowHidePasswordComponent,
            ShowHideTriggerDirective,
            ShowHideInputDirective,
            ShowHideStatusDirective], imports: [CommonModule, FormsModule, FontAwesomeModule], exports: [ShowHidePasswordComponent,
            ShowHideTriggerDirective,
            ShowHideInputDirective,
            ShowHideStatusDirective] });
})();

/*
 * Public API Surface of ngx-show-hide-password
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BtnStyle, ShowHideInputDirective, ShowHidePasswordComponent, ShowHidePasswordModule, ShowHideService, ShowHideStatusDirective, ShowHideTriggerDirective };
//# sourceMappingURL=ngx-show-hide-password.mjs.map
//# sourceMappingURL=ngx-show-hide-password.mjs.map
