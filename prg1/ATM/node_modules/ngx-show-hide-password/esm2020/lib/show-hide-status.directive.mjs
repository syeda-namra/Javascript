/* eslint-disable @angular-eslint/directive-selector */
import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./show-hide.service";
const defaultConfig = {
    show: 'visibility',
    hide: 'visibility_off',
    materialIcon: false,
    id: undefined,
};
export class ShowHideStatusDirective {
    constructor(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
        this.config = defaultConfig;
    }
    set showHideStatus(config) {
        this.init(config);
    }
    init(config) {
        this.config = {
            ...defaultConfig,
            ...config,
        };
        if (this.config.id) {
            this.subscription = this.service
                .getObservable(this.config.id)
                .subscribe((show) => this.updateStatus(show));
        }
        else {
            this.errorHandler.handleError(new Error(`Status can not be set without [id].`));
        }
    }
    updateStatus(show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, (!show ? this.config.hide : this.config.show) ?? '');
            this.renderer.addClass(this.el.nativeElement, (show ? this.config.hide : this.config.show) ?? '');
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideStatusDirective.ɵfac = function ShowHideStatusDirective_Factory(t) { return new (t || ShowHideStatusDirective)(i0.ɵɵdirectiveInject(i1.ShowHideService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ErrorHandler)); };
ShowHideStatusDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: ShowHideStatusDirective, selectors: [["", "showHideStatus", ""]], inputs: { showHideStatus: "showHideStatus" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHideStatusDirective, [{
        type: Directive,
        args: [{
                selector: '[showHideStatus]',
            }]
    }], function () { return [{ type: i1.ShowHideService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ErrorHandler }]; }, { showHideStatus: [{
            type: Input
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkL3NyYy9saWIvc2hvdy1oaWRlLXN0YXR1cy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELE9BQU8sRUFBRSxTQUFTLEVBQXlCLEtBQUssRUFBMkIsTUFBTSxlQUFlLENBQUM7OztBQVVqRyxNQUFNLGFBQWEsR0FBeUI7SUFDMUMsSUFBSSxFQUFFLFlBQVk7SUFDbEIsSUFBSSxFQUFFLGdCQUFnQjtJQUN0QixZQUFZLEVBQUUsS0FBSztJQUNuQixFQUFFLEVBQUUsU0FBUztDQUNkLENBQUM7QUFLRixNQUFNLE9BQU8sdUJBQXVCO0lBUWxDLFlBQ1UsT0FBd0IsRUFDeEIsRUFBYyxFQUNkLFFBQW1CLEVBQ25CLFlBQTBCO1FBSDFCLFlBQU8sR0FBUCxPQUFPLENBQWlCO1FBQ3hCLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBQ25CLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBWDVCLFdBQU0sR0FBeUIsYUFBYSxDQUFDO0lBWWxELENBQUM7SUFUSixJQUFhLGNBQWMsQ0FBQyxNQUE0QjtRQUN0RCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFTTyxJQUFJLENBQUMsTUFBNEI7UUFDdkMsSUFBSSxDQUFDLE1BQU0sR0FBRztZQUNaLEdBQUcsYUFBYTtZQUNoQixHQUFHLE1BQU07U0FDVixDQUFDO1FBQ0YsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRTtZQUNsQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPO2lCQUM3QixhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7aUJBQzdCLFNBQVMsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO2FBQU07WUFDTCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDLENBQUM7U0FDakY7SUFDSCxDQUFDO0lBRU8sWUFBWSxDQUFDLElBQWE7UUFDaEMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQ3JCLFdBQVcsRUFDWCxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDM0MsQ0FBQztTQUNIO2FBQU07WUFDTCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQ3JCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FDcEQsQ0FBQztZQUNGLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUNwQixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDckIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FDbkQsQ0FBQztTQUNIO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUNqQztJQUNILENBQUM7OzhGQXBEVSx1QkFBdUI7MEVBQXZCLHVCQUF1Qjt1RkFBdkIsdUJBQXVCO2NBSG5DLFNBQVM7ZUFBQztnQkFDVCxRQUFRLEVBQUUsa0JBQWtCO2FBQzdCOzhJQUtjLGNBQWM7a0JBQTFCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yICovXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5wdXQsIEVycm9ySGFuZGxlciwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTaG93SGlkZVNlcnZpY2UgfSBmcm9tICcuL3Nob3ctaGlkZS5zZXJ2aWNlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNob3dIaWRlU3RhdHVzQ29uZmlnIHtcbiAgaWQ/OiBzdHJpbmc7XG4gIHNob3c/OiBzdHJpbmc7XG4gIGhpZGU/OiBzdHJpbmc7XG4gIG1hdGVyaWFsSWNvbj86IGJvb2xlYW47XG59XG5jb25zdCBkZWZhdWx0Q29uZmlnOiBTaG93SGlkZVN0YXR1c0NvbmZpZyA9IHtcbiAgc2hvdzogJ3Zpc2liaWxpdHknLFxuICBoaWRlOiAndmlzaWJpbGl0eV9vZmYnLFxuICBtYXRlcmlhbEljb246IGZhbHNlLFxuICBpZDogdW5kZWZpbmVkLFxufTtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Nob3dIaWRlU3RhdHVzXScsXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlU3RhdHVzRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSBjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnID0gZGVmYXVsdENvbmZpZztcbiAgcHJpdmF0ZSBzdWJzY3JpcHRpb24/OiBTdWJzY3JpcHRpb247XG5cbiAgQElucHV0KCkgc2V0IHNob3dIaWRlU3RhdHVzKGNvbmZpZzogU2hvd0hpZGVTdGF0dXNDb25maWcpIHtcbiAgICB0aGlzLmluaXQoY29uZmlnKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc2VydmljZTogU2hvd0hpZGVTZXJ2aWNlLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIHByaXZhdGUgZXJyb3JIYW5kbGVyOiBFcnJvckhhbmRsZXJcbiAgKSB7fVxuXG4gIHByaXZhdGUgaW5pdChjb25maWc6IFNob3dIaWRlU3RhdHVzQ29uZmlnKTogdm9pZCB7XG4gICAgdGhpcy5jb25maWcgPSB7XG4gICAgICAuLi5kZWZhdWx0Q29uZmlnLFxuICAgICAgLi4uY29uZmlnLFxuICAgIH07XG4gICAgaWYgKHRoaXMuY29uZmlnLmlkKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IHRoaXMuc2VydmljZVxuICAgICAgICAuZ2V0T2JzZXJ2YWJsZSh0aGlzLmNvbmZpZy5pZClcbiAgICAgICAgLnN1YnNjcmliZSgoc2hvdykgPT4gdGhpcy51cGRhdGVTdGF0dXMoc2hvdykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcihuZXcgRXJyb3IoYFN0YXR1cyBjYW4gbm90IGJlIHNldCB3aXRob3V0IFtpZF0uYCkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3RhdHVzKHNob3c6IGJvb2xlYW4pIHtcbiAgICBpZiAodGhpcy5jb25maWcubWF0ZXJpYWxJY29uKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNldFByb3BlcnR5KFxuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgICdpbm5lckhUTUwnLFxuICAgICAgICBzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3dcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoXG4gICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcbiAgICAgICAgKCFzaG93ID8gdGhpcy5jb25maWcuaGlkZSA6IHRoaXMuY29uZmlnLnNob3cpID8/ICcnXG4gICAgICApO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhcbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LFxuICAgICAgICAoc2hvdyA/IHRoaXMuY29uZmlnLmhpZGUgOiB0aGlzLmNvbmZpZy5zaG93KSA/PyAnJ1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxuICB9XG59XG4iXX0=