import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
export class ShowHideService {
    constructor() {
        this.states = [];
    }
    getIO(id) {
        let io = this.states.find(o => o.id === id);
        if (!io) {
            io = this.init(id);
        }
        return io;
    }
    init(id) {
        const subject = new ReplaySubject(1);
        const io = {
            id,
            show: false,
            subject
        };
        this.states.push(io);
        return io;
    }
    saveAndProadcast(io, show) {
        io.show = show;
        io.subject.next(io.show);
    }
    getObservable(id) {
        return this.getIO(id).subject;
    }
    setShow(id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    }
    toggleShow(id) {
        const io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    }
}
ShowHideService.ɵfac = function ShowHideService_Factory(t) { return new (t || ShowHideService)(); };
ShowHideService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ShowHideService, factory: ShowHideService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ShowHideService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkL3NyYy9saWIvc2hvdy1oaWRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXVCLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFXMUQsTUFBTSxPQUFPLGVBQWU7SUFHMUI7UUFGaUIsV0FBTSxHQUFhLEVBQUUsQ0FBQztJQUV4QixDQUFDO0lBRVIsS0FBSyxDQUFDLEVBQVU7UUFDdEIsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNwQjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVPLElBQUksQ0FBQyxFQUFVO1FBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sRUFBRSxHQUFHO1lBQ1QsRUFBRTtZQUNGLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTztTQUNSLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxFQUFVLEVBQUUsSUFBYTtRQUNoRCxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRU0sYUFBYSxDQUFDLEVBQVU7UUFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNoQyxDQUFDO0lBRU0sT0FBTyxDQUFDLEVBQVUsRUFBRSxJQUFhO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxVQUFVLENBQUMsRUFBVTtRQUMxQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7OEVBeENVLGVBQWU7cUVBQWYsZUFBZSxXQUFmLGVBQWUsbUJBRmQsTUFBTTt1RkFFUCxlQUFlO2NBSDNCLFVBQVU7ZUFBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW50ZXJmYWNlIElTdGF0ZSB7XG4gIGlkOiBzdHJpbmc7XG4gIHNob3c6IGJvb2xlYW47XG4gIHN1YmplY3Q6IFN1YmplY3Q8Ym9vbGVhbj47XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNob3dIaWRlU2VydmljZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhdGVzOiBJU3RhdGVbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBwcml2YXRlIGdldElPKGlkOiBzdHJpbmcpOiBJU3RhdGUge1xuICAgIGxldCBpbyA9IHRoaXMuc3RhdGVzLmZpbmQobyA9PiBvLmlkID09PSBpZCk7XG4gICAgaWYgKCFpbykge1xuICAgICAgaW8gPSB0aGlzLmluaXQoaWQpO1xuICAgIH1cbiAgICByZXR1cm4gaW87XG4gIH1cblxuICBwcml2YXRlIGluaXQoaWQ6IHN0cmluZyk6IElTdGF0ZSB7XG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PGJvb2xlYW4+KDEpO1xuICAgIGNvbnN0IGlvID0ge1xuICAgICAgaWQsXG4gICAgICBzaG93OiBmYWxzZSxcbiAgICAgIHN1YmplY3RcbiAgICB9O1xuICAgIHRoaXMuc3RhdGVzLnB1c2goaW8pO1xuICAgIHJldHVybiBpbztcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZUFuZFByb2FkY2FzdChpbzogSVN0YXRlLCBzaG93OiBib29sZWFuKSB7XG4gICAgaW8uc2hvdyA9IHNob3c7XG4gICAgaW8uc3ViamVjdC5uZXh0KGlvLnNob3cpO1xuICB9XG5cbiAgcHVibGljIGdldE9ic2VydmFibGUoaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLmdldElPKGlkKS5zdWJqZWN0O1xuICB9XG5cbiAgcHVibGljIHNldFNob3coaWQ6IHN0cmluZywgc2hvdzogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMuc2F2ZUFuZFByb2FkY2FzdCh0aGlzLmdldElPKGlkKSwgc2hvdyk7XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlU2hvdyhpZDogc3RyaW5nKTogdm9pZCB7XG4gICAgY29uc3QgaW8gPSB0aGlzLmdldElPKGlkKTtcbiAgICB0aGlzLnNhdmVBbmRQcm9hZGNhc3QoaW8sICFpby5zaG93KTtcbiAgfVxufVxuIl19